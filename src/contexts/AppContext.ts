import React from 'react';
import { Task, Settings, InboxMessage, ChecklistItem, ChecklistSection, TimeLogEntry } from '../types';

export interface AppContextType {
  // State
  tasks: Task[];
  setTasks: React.Dispatch<React.SetStateAction<Task[]>>;
  completedTasks: Task[];
  setCompletedTasks: React.Dispatch<React.SetStateAction<Task[]>>;
  settings: Settings;
  setSettings: React.Dispatch<React.SetStateAction<Settings>>;
  inboxMessages: InboxMessage[];
  setInboxMessages: React.Dispatch<React.SetStateAction<InboxMessage[]>>;
  archivedMessages: InboxMessage[];
  setArchivedMessages: React.Dispatch<React.SetStateAction<InboxMessage[]>>;
  toastMessage: string;
  timerNotifications: Task[];
  overdueNotifications: Set<number>;
  trashedMessages: InboxMessage[];
  setTrashedMessages: React.Dispatch<React.SetStateAction<InboxMessage[]>>;
  searchQuery: string;
  setSearchQuery: (query: string) => void;
  editingTaskId: number | null;
  setEditingTaskId: (id: number | null) => void;
  editingText: string;
  setEditingText: (text: string) => void;
  editingViaContext: number | null;
  confirmingClearCompleted: boolean;
  focusChecklistItemId: number | null;
  setFocusChecklistItemId: (id: number | null) => void;
  activeTimerTaskId: number | null;
  activeTimerEntry: TimeLogEntry | null;
  activeTimerLiveTime: number;
  primedTaskId: number | null;
  fullTaskViewId: number | null;
  setFullTaskViewId: (id: number | null) => void;
  newTask: Partial<Task>;
  setNewTask: React.Dispatch<React.SetStateAction<Partial<Task>>>;
  isDirty: boolean;
  isLoading: boolean;
  lastSaveTime: number | null;
  autoSaveCountdown: number;
  bulkAddText: string;
  setBulkAddText: (text: string) => void;
  isPromptOpen: boolean;
  setIsPromptOpen: (isOpen: boolean) => void;
  bulkAddCategoryId: number | 'default';
  setBulkAddCategoryId: React.Dispatch<React.SetStateAction<number | 'default'>>;
  bulkAddPriority: 'High' | 'Medium' | 'Low';
  setBulkAddPriority: React.Dispatch<React.SetStateAction<'High' | 'Medium' | 'Low'>>;
  bulkAddCompleteBy: string;
  setBulkAddCompleteBy: React.Dispatch<React.SetStateAction<string>>;
  bulkAddTransactionType: 'none' | 'income' | 'expense';
  setBulkAddTransactionType: React.Dispatch<React.SetStateAction<'none' | 'income' | 'expense'>>;
  bulkAddAccountId: number | undefined;
  setBulkAddAccountId: React.Dispatch<React.SetStateAction<number | undefined>>;
  bulkAddTaxCategoryId: number | undefined;
  setBulkAddTaxCategoryId: React.Dispatch<React.SetStateAction<number | undefined>>;
  activeTaxCategoryId: number | 'all';
  setActiveTaxCategoryId: React.Dispatch<React.SetStateAction<number | 'all'>>;
  taxStatusFilter: 'all' | 'tagged' | 'untagged';
  setTaxStatusFilter: React.Dispatch<React.SetStateAction<'all' | 'tagged' | 'untagged'>>;
  bulkAddYear: number;
  setBulkAddYear: React.Dispatch<React.SetStateAction<number>>;
  selectedTaskIds: number[];
  setSelectedTaskIds: React.Dispatch<React.SetStateAction<number[]>>;
  isAddTaskOpen: boolean;
  setIsAddTaskOpen: (isOpen: boolean) => void;
  selectedYear: 'all' | number;
  setSelectedYear: React.Dispatch<React.SetStateAction<'all' | number>>;
  isWorkSessionManagerOpen: boolean;
  setIsWorkSessionManagerOpen: (isOpen: boolean) => void;
  visibleTaskIds: number[];
  setVisibleTaskIds: React.Dispatch<React.SetStateAction<number[]>>;
  focusTaxBulkAdd: boolean;
  setFocusTaxBulkAdd: React.Dispatch<React.SetStateAction<boolean>>;
  nonTransactionTasksCount: number;

  // Refs
  historyIndex: number;
  viewHistory: string[];
  newTaskTitleInputRef: React.RefObject<HTMLInputElement>;

  searchInputRef: React.RefObject<HTMLInputElement>;
  sortSelectRef: React.RefObject<HTMLSelectElement>;
  snoozeTimeSelectRef: React.RefObject<HTMLSelectElement>;
  filteredTasks: Task[];
  activeChecklistRef: React.RefObject<{ handleUndo: () => void; handleRedo: () => void; resetHistory: (sections: ChecklistSection[]) => void; }>;

  // Handlers
  showToast: (message: string, duration?: number) => void;
  handleClearAll: () => void;
  handleCopyList: () => void;
  handleClearCompleted: () => void;
  handleCompleteTask: (task: Task, status?: 'completed' | 'skipped') => void;
  moveTask: (taskId: number, targetTaskId: number) => void;
  removeTask: (id: number) => void;
  handleTaskUpdate: (task: Task) => void;
  handleAccordionToggle: (id: number) => void;
  handleReopenTask: (task: Task) => void;
  handleDuplicateTask: (task: Task) => void;  
  handleCopyTaskAsCsv: (taskId: number) => void;
  handleEditChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  handleEditKeyDown: (event: React.KeyboardEvent<HTMLInputElement>, taskId: number) => void;
  setActiveCategoryId: (id: number | 'all') => void;
  setActiveSubCategoryId: (id: number | 'all') => void;
  focusAddTaskInput: () => void;
  handleToggleTaskSelection: (taskId: number) => void;
  handleChecklistCompletion: (item: ChecklistItem, sectionId: number, updatedSections: ChecklistSection[]) => void;
  handleGlobalToggleTimer: (taskId: number, entryId: number, entry?: TimeLogEntry, newTimeLog?: TimeLogEntry[]) => void;
  handleGlobalStopTimer: () => void;
  handleGlobalResetTimer: (taskId: number, entryId: number) => void;
  handlePrimeTaskWithNewLog: (taskId: number, newTimeLog: TimeLogEntry[], timeLogTitle?: string) => void;
  handlePrimeTask: (taskId: number) => void;
  handleClearActiveTimer: () => void;  
  handleNextTask: () => void;
  handlePreviousTask: () => void;
  handleNextEntry: () => void;
  handleNextChapter: () => void;
  handlePreviousChapter: () => void;
  handleStartSession: () => void;
  handlePostLog: (taskId: number) => void;
  handlePostAndResetLog: (taskId: number) => void;
  handleResetAllLogEntries: (taskId: number) => void;
  handlePostAndComplete: (taskId: number, entryId: number, onUpdate: (updatedTask: Task) => void) => void;
  handleStartTaskFromSession: (taskId: number) => void;
  handlePreviousEntry: () => void;
  handleTimerNotify: (task: Task) => void;
  handleSnooze: (task: Task, duration?: 'low' | 'medium' | 'high' | 'long') => void;
  handleSnoozeAll: (duration?: 'low' | 'medium' | 'high' | 'long') => void;
  handleUnSnooze: (taskId: number) => void;
  handleUnSnoozeAll: () => void;
  handleSilenceTask: (taskId: number) => void;
  handleUnsilenceTask: (taskId: number) => void;
  handleCompleteAllOverdue: () => void;
  handleSkipAllOverdue: () => void;
  handleDeleteAllOverdue: () => void;
  handleDismissAllOverdue: () => void;
  handleCreateNewTask: () => void;
  handleGoToPreviousTask: (currentTaskId: number) => void;
  handleGoToNextTask: (currentTaskId: number) => void;
  navigateToTask: (taskId: number, sectionId?: number) => void;
  handleSaveProject: () => void;  
  navigateToView: (view: 'meme' | 'list' | 'reports' | 'inbox' | 'transactions', options?: { initialTab?: 'summary' | 'earnings' | 'activity' | 'raw' | 'history' | 'finances' | 'taxes' }) => void;
  handleBulkAdd: (options: { categoryId: number | 'default'; priority: 'High' | 'Medium' | 'Low'; completeBy?: string; transactionType?: 'none' | 'income' | 'expense', accountId?: number, taxCategoryId?: number }, contextYear?: number) => void;
  handleBulkDelete: (taskIds: number[]) => void;
  handleBulkReopen: (taskIds: number[]) => void;
  handleBulkComplete: (taskIds: number[]) => void;
  handleBulkSetPriority: (taskIds: number[], priority: 'High' | 'Medium' | 'Low') => void;
  handleBulkSetDueDate: (taskIds: number[], completeBy: number) => void;
  handleBulkDownloadAsCsv: (taskIds: number[]) => void;
  handleBulkCopyAsCsv: (taskIds: number[]) => void;
  handleSetTaxCategory: (taskId: number, taxCategoryId: number | undefined) => void;
  handleBulkSetTaxCategory: (taskIds: number[], taxCategoryId: number | undefined) => void;
  handleBulkSetIncomeType: (taskIds: number[], incomeType: 'w2' | 'business' | 'reimbursement' | undefined) => void;
  handleBulkSetAccount: (taskIds: number[], accountId: number) => void;
  handleSyncIds: () => void;
  handleAutoCategorize: (taskIdsToProcess: number[], subCategoryIdToProcess?: number) => void;
  handleAutoTagIncomeTypes: (taskIdsToProcess: number[], incomeTypeToProcess?: 'w2' | 'business' | 'reimbursement') => void;
  handleSyncTransactionTypes: () => void;  
  handleBulkSetCategory: (taskIds: number[], categoryId: number) => void;
  handleExport: () => void;
  handleImport: () => void;
  handleAutoTaxCategorize: (taskIdsToProcess: number[], taxCategoryIdToProcess?: number) => void;
  handleResetSettings: () => void;
  handleFontScaleChange: (scale: 'small' | 'medium' | 'large') => void;  
  applyDefaultShadow: () => void;
  resetShadow: () => void;
  // Inbox Handlers
  handleInboxItemClick: (message: InboxMessage) => void;
  handleToggleImportant: (messageId: number) => void;
  handleArchiveInboxMessage: (messageId: number) => void;
  handleDismissInboxMessage: (messageId: number) => void;
  handleUnarchiveInboxMessage: (messageId: number) => void;
  handleDismissArchivedMessage: (messageId: number) => void;
  handleRestoreFromTrash: (messageId: number) => void;
  handleDeletePermanently: (messageId: number) => void;
  handleRestoreAllFromTrash: () => void;
  handleEmptyTrash: () => void;
  handleTrashAllArchived: () => void;
  handleDismissAllInboxMessages: () => void;
  createManualBackup: (backupName: string) => Promise<{ success: boolean; path: string; }>;
}

// We provide a default value of `null` and will handle the null check in components.
export const AppContext = React.createContext<AppContextType | null>(null);

// Custom hook for easy access to the context
export const useAppContext = () => {
  const context = React.useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within an AppContextProvider');
  }
  return context;
};